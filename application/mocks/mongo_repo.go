// Code generated by mockery v2.14.1. DO NOT EDIT.

package mockrepo

import (
	models "github.com/myKemal/go_restfull_api/application/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MongoRepository is an autogenerated mock type for the MongoRepository type
type MongoRepository struct {
	mock.Mock
}

// GetRecordsWith provides a mock function with given fields: minCount, maxCount, startDate, endDate
func (_m *MongoRepository) GetRecordsWith(minCount int, maxCount int, startDate time.Time, endDate time.Time) ([]models.MongoRecord, error) {
	ret := _m.Called(minCount, maxCount, startDate, endDate)

	var r0 []models.MongoRecord
	if rf, ok := ret.Get(0).(func(int, int, time.Time, time.Time) []models.MongoRecord); ok {
		r0 = rf(minCount, maxCount, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MongoRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, time.Time, time.Time) error); ok {
		r1 = rf(minCount, maxCount, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMongoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMongoRepository creates a new instance of MongoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMongoRepository(t mockConstructorTestingTNewMongoRepository) *MongoRepository {
	mock := &MongoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
